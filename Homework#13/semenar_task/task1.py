#
# # task1
# ''
# """
# üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Ç–µ—Ö –ø–æ—Ä,
#  –ø–æ–∫–∞ –æ–Ω –Ω–µ –≤–≤–µ–¥–µÃà—Ç —Ü–µ–ª–æ–µ –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ.
# üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–∏ÃÜ—Ç–µ –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
# """
#
#
# # def get():
# #     while True:
# #         num = (input('–í–≤–µ–¥–∏—Ç–µ: '))
# #         if not isinstance(num, (int, float)):
# #             raise ValueError('ERROR –í–≤–æ–¥–∏ int and float')
# #         break
# #     return num
# #
# #
# # def get2():
# #     while True:
# #         num = input('–í–≤–µ–¥–∏—Ç–µ: ')
# #         if not isinstance(num, (int | float)):
# #             raise ValueError('ERROR –í–≤–æ–¥–∏ int and float')
# #         else:
# #             break
# def get_number():
#     """
#
#     >>> get_number(2)
#     2
#     >>> get_number(2.3)
#     2.3
#     >>> get_number('eeeeee')
#
#     """
#     while True:
#         try:
#             arg = float(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: "))
#             return arg
#         except ValueError:
#             print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ.")
#
#
# # number = get_number()
# # print("–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ:", number)
#
# if __name__ == '__main__':
#     import doctest
#     doctest.testmod()
#     # get_number()
#     # print(get())

import unittest
import doctest


def get_number():
    while True:
        try:
            arg = float(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: "))
            return arg
        except ValueError:
            print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ.")


class TestGetNumber(unittest.TestCase):
    def test_integer(self):
        self.assertEqual(get_number(), 42)

    def test_float(self):
        self.assertAlmostEqual(get_number(), 3.14159, delta=0.00001)

    def test_negative(self):
        self.assertEqual(get_number(), -7)

    def test_zero(self):
        self.assertEqual(get_number(), 0)


def load_tests(loader, tests, ignore):
    tests.addTests(doctest.DocTestSuite())
    return tests


if __name__ == '__main__':
    unittest.main()
